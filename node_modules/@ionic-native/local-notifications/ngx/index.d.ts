import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare enum ELocalNotificationTriggerUnit {
    SECOND = "second",
    MINUTE = "minute",
    HOUR = "hour",
    DAY = "day",
    WEEK = "week",
    MONTH = "month",
    QUARTER = "quarter",
    YEAR = "year",
    WEEKDAY = "weekday",
    WEEKDAY_ORDINAL = "weekdayOrdinal",
    WEEK_OF_MONTH = "weekOfMonth"
}
export interface ILocalNotificationEvery {
    /**
     * The minute.
     */
    minute?: number;
    /**
     * The hour.
     */
    hour?: number;
    /**
     * The day.
     */
    day?: number;
    /**
     * The day of week.
     */
    weekday?: number;
    /**
     * The week of yeaday of the ardinal week.
     */
    week?: number;
    /**
     * The day of the ordinal week.
     */
    weekdayOrdinal?: number;
    /**
     * The week of month.
     */
    weekOfMonth?: number;
    /**
     * The month.
     */
    month?: number;
    /**
     * The quarter.
     */
    quarter?: number;
    /**
     * The year.
     */
    year?: number;
}
export interface ILocalNotificationTrigger {
    /** ***** FIX ***** */
    /**
     * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.
     * Default: now ~ new Date()
     */
    at?: Date;
    /** ***** TIMESPAN ***** */
    /**
     * Amount of units
     */
    in?: number;
    /**
     * Unit
     */
    unit?: ELocalNotificationTriggerUnit;
    /** ***** REPEAT/MATCH ***** */
    /**
     * Amount of units
     */
    count?: number;
    /**
     * The unit
     */
    every?: ELocalNotificationTriggerUnit | ILocalNotificationEvery;
    /**
     * The end of the repeating notification
     */
    before?: Date;
    /**
     * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.
     * Only for "repeat"
     * Default: now ~ new Date()
     */
    firstAt?: Date;
    /**
     * Only for "match"
     */
    after?: Date;
    /** ***** LOCATION ***** */
    /**
     * IOS ONLY
     * Center of the location
     * Latitude and Longitude values
     */
    center?: number[];
    /**
     * IOS ONLY
     * Radius in meters
     */
    radius?: number;
    /**
     * IOS ONLY
     * Trigger on entry of the location
     */
    notifyOnEntry?: boolean;
    /**
     * IOS ONLY
     * Trigger on exit of the location
     */
    notifyOnExit?: boolean;
    /**
     * IOS ONLY
     * Trigger only once?
     */
    single?: boolean;
}
export declare enum ILocalNotificationActionType {
    INPUT = "input",
    BUTTON = "button"
}
/**
 * Notification action
 *
 * @see https://github.com/katzer/cordova-plugin-local-notifications#actions
 */
export interface ILocalNotificationAction {
    /**
     * The id of the action is used as the event name in the listener function
     */
    id?: string;
    /**
     * The title of the notification message
     */
    title?: string;
    /**
     * Make this notification show when app in foreground.
     */
    foreground?: boolean;
    /**
     * Specifies whether the action causes the app to launch in the foreground
     */
    launch?: boolean;
    /**
     * If the value is 'decline' the action is displayed with special highlighting to indicate that it performs a destructive task
     */
    ui?: string;
    /**
     * Specifies whether the action requires that the user’s device be unlocked.
     * When the user selects an action with this option, the system prompts
     * the user to unlock the device
     */
    needsAuth?: boolean;
    /**
     * The resource path of the action icon
     */
    icon?: string;
    /**
     * ANDROID ONLY
     * An array of pre-defined choices for users input
     */
    choices?: string[];
    /**
     * ANDROID ONLY
     * Specifies whether the user can provide arbitrary text values
     */
    editable?: boolean;
    /**
     * IOS ONLY
     * The title of the text input button that is displayed to the user.
     */
    submitTitle?: string;
    /**
     * The type of the action. If omitted 'button' is used.
     */
    type?: ILocalNotificationActionType;
}
export interface ILocalNotificationProgressBar {
    /**
     * Is the progress bar enabled?
     */
    enabled?: boolean;
    /**
     * The current value
     */
    value?: number;
    /**
     * ANDROID ONLY
     * The maximum value (default is 100)
     */
    maxValue?: number;
    /**
     * ANDROID ONLY
     * Show an indeterminate progress bar
     */
    indeterminate?: boolean;
    /**
     * WINDOWS ONLY
     * Gets or sets an optional string to be displayed instead of the
     * default percentage string. If this isn't provided, something
     * like "70%" will be displayed.
     */
    description?: string;
    /**
     * WINDOWS ONLY
     * Sets the status (required), which is displayed underneath the progress bar
     * on the left.
     * This string should reflect the status of the operation,
     * like "Downloading..." or "Installing..."
     */
    status?: string;
}
export interface ILocalNotification {
    /**
     * A unique identifier required to clear, cancel, update or retrieve the local notification in the future
     * Default: 0
     */
    id?: number;
    /**
     * First row of the notification
     * Default: Empty string (iOS) or the app name (Android)
     */
    title?: string;
    /**
     * Second row of the notification
     * Default: Empty string
     */
    text?: string | string[];
    /**
     * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)
     * Default: 0 (which means don't show a number)
     */
    badge?: number;
    /**
     * Uri of the file containing the sound to play when an alert is displayed
     * Default: res://platform_default
     */
    sound?: string;
    /**
     * Arbitrary data, objects will be encoded to JSON string
     * Default: null
     */
    data?: any;
    /**
     * ANDROID ONLY
     * Uri of the icon that is shown in the ticker and notification
     * Default: res://icon
     */
    icon?: string;
    /**
     * ANDROID ONLY
     * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes
     * Default: res://ic_popup_reminder
     */
    smallIcon?: string;
    /**
     * ANDROID ONLY
     * RGB value for the background color of the smallIcon.
     * Default: Androids COLOR_DEFAULT, which will vary based on Android version.
     */
    color?: string;
    /**
     * ANDROID ONLY
     * Use the default notification vibrate.
     */
    vibrate?: boolean;
    /**
     * ANDROID ONLY
     * Define the blinking of the LED on the device.
     * If set to true, the LED will blink in the default color with
     * timings for on and off set to 1000 ms.
     * If set to a string, the LED will blink in this ARGB value with
     * timings for on and off set to 1000 ms.
     * If set to an array, the value of the key 0 will be used as the color,
     * the value of the key 1 will be used as the 'on' timing, the value of
     * the key 2 will be used as the 'off' timing
     */
    led?: {
        color: string;
        on: number;
        off: number;
    } | any[] | boolean | string;
    /**
     * Notification priority.
     * Integers between -2 and 2, whereas -2 is minimum and 2 is maximum priority
     */
    priority?: number;
    /**
     * Is a silent notification
     */
    silent?: boolean;
    /**
     * Specifies whether the a click on the notification causes the app
     * to launch in the foreground
     */
    launch?: boolean;
    /**
     * ANDROID ONLY
     * Wakeup the device. (default is true)
     */
    wakeup?: boolean;
    /**
     * ANDROID ONLY
     * Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled.
     */
    timeoutAfter?: number | false;
    /**
     * Actions id or actions
     */
    actions?: string | ILocalNotificationAction[];
    /**
     * When to trigger the notification
     */
    trigger?: ILocalNotificationTrigger;
    /**
     * A list of image attachments
     */
    attachments?: string[];
    /**
     * ANDROID ONLY
     * If and how the notification shall show the when date.
     * Possbile values:
     *                  boolean: true equals 'clock', false disable a watch/counter
     *                  'clock': Show the when date in the content view
     *                  'chronometer': Show a stopwatch
     *
     */
    clock?: boolean | string;
    /**
     * Shows a progress bar
     * Setting a boolean is a shortcut for {enabled: true/false} respectively
     */
    progressBar?: ILocalNotificationProgressBar | boolean;
    /**
     * ANDROID ONLY
     * If multiple notifications have the same group your app can present
     * them as a single group.
     */
    group?: string;
    /**
     * ANDROID ONLY
     * If set to 'true' this notification could use 'summary' to summarize
     * the contents of the whole group
     */
    groupSummary?: boolean;
    /**
     * ANDROID ONLY
     * Summary of the whole notification group. Should be used in conjuntion
     * with 'groupSummary' set to true
     */
    summary?: string;
    /**
     * ANDROID ONLY
     * Sets the number of items this notification represents.
     */
    number?: number;
    /**
     * ANDROID ONLY
     * Set whether this is an "ongoing" notification.
     * Ongoing notifications cannot be dismissed by the user,
     * so your application or service must take care of canceling them.
     */
    sticky?: boolean;
    /**
     * ANDROID ONLY
     * Make this notification automatically dismissed when the user touches it.
     */
    autoClear?: boolean;
    /**
     * ANDROID ONLY
     * If set to true the notification will be show in its entirety on all lockscreens.
     * If set to false it will not be revealed on a secure lockscreen.
     */
    lockscreen?: boolean;
    /**
     * ANDROID ONLY
     * Set the default notification options that will be used.
     * The value should be one or more of the following fields combined with
     * bitwise-or: DEFAULT_SOUND, DEFAULT_VIBRATE, DEFAULT_LIGHTS.
     */
    defaults?: number;
    /**
     * ANDROID ONLY
     * Specifies the channel the notification should be delivered on.
     */
    channel?: string;
    /**
     * ANDROID ONLY
     * Set the token for the media session
     */
    mediaSession?: string;
    /**
     * Make this notification show when app in foreground.
     */
    foreground?: boolean;
}
/**
 * @name Local Notifications
 * @description
 * This plugin allows you to display local notifications on the device
 *
 * @usage
 * ```typescript
 * import { LocalNotifications } from '@ionic-native/local-notifications/ngx';
 *
 *
 * constructor(private localNotifications: LocalNotifications) { }
 *
 * ...
 *
 *
 * // Schedule a single notification
 * this.localNotifications.schedule({
 *   id: 1,
 *   text: 'Single ILocalNotification',
 *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',
 *   data: { secret: key }
 * });
 *
 *
 * // Schedule multiple notifications
 * this.localNotifications.schedule([{
 *    id: 1,
 *    text: 'Multi ILocalNotification 1',
 *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',
 *    data: { secret:key }
 *   },{
 *    id: 2,
 *    title: 'Local ILocalNotification Example',
 *    text: 'Multi ILocalNotification 2',
 *    icon: 'http://example.com/icon.png'
 * }]);
 *
 *
 * // Schedule delayed notification
 * this.localNotifications.schedule({
 *    text: 'Delayed ILocalNotification',
 *    trigger: {at: new Date(new Date().getTime() + 3600)},
 *    led: 'FF0000',
 *    sound: null
 * });
 * ```
 * @interfaces
 * ILocalNotification
 */
export declare class LocalNotifications extends IonicNativePlugin {
    /**
     * Informs if the app has the permission to show notifications.
     * @returns {Promise<boolean>}
     */
    hasPermission(): Promise<boolean>;
    /**
     * Request permission to show notifications if not already granted.
     * @returns {Promise<boolean>}
     */
    requestPermission(): Promise<boolean>;
    /**
     * Schedules a single or multiple notifications
     * @param options {Notification | ILocalNotification[]} optional
     */
    schedule(options?: ILocalNotification | ILocalNotification[]): void;
    /**
     * Updates a previously scheduled notification. Must include the id in the options parameter.
     * @param options {ILocalNotification} optional
     */
    update(options?: ILocalNotification): void;
    /**
     * Clears single or multiple notifications
     * @param notificationId {any} A single notification id, or an array of notification ids.
     * @returns {Promise<any>} Returns a promise when the notification had been cleared
     */
    clear(notificationId: any): Promise<any>;
    /**
     * Clears all notifications
     * @returns {Promise<any>} Returns a promise when all notifications have cleared
     */
    clearAll(): Promise<any>;
    /**
     * Cancels single or multiple notifications
     * @param notificationId {any} A single notification id, or an array of notification ids.
     * @returns {Promise<any>} Returns a promise when the notification is canceled
     */
    cancel(notificationId: any): Promise<any>;
    /**
     * Cancels all notifications
     * @returns {Promise<any>} Returns a promise when all notifications are canceled
     */
    cancelAll(): Promise<any>;
    /**
     * Checks presence of a notification
     * @param notificationId {number}
     * @returns {Promise<boolean>}
     */
    isPresent(notificationId: number): Promise<boolean>;
    /**
     * Checks is a notification is scheduled
     * @param notificationId {number}
     * @returns {Promise<boolean>}
     */
    isScheduled(notificationId: number): Promise<boolean>;
    /**
     * Checks if a notification is triggered
     * @param notificationId {number}
     * @returns {Promise<boolean>}
     */
    isTriggered(notificationId: number): Promise<boolean>;
    /**
     * Check if a notification has a given type.
     * @param {number} id The ID of the notification.
     * @param {string} type  The type of the notification.
     * @returns {Promise<boolean>}
     */
    hasType(id: number, type: string): Promise<boolean>;
    /**
     * Get the type (triggered, scheduled) for the notification.
     * @param {number} id The ID of the notification.
     */
    getType(id: number): Promise<boolean>;
    /**
     * Get all the notification ids
     * @returns {Promise<Array<number>>}
     */
    getIds(): Promise<number[]>;
    /**
     * Get the ids of scheduled notifications
     * @returns {Promise<number[]>} Returns a promise
     */
    getScheduledIds(): Promise<number[]>;
    /**
     * Get the ids of triggered notifications
     * @returns {Promise<Array<number>>}
     */
    getTriggeredIds(): Promise<number[]>;
    /**
     * Get a notification object
     * @param notificationId {any} The id of the notification to get
     * @returns {Promise<ILocalNotification>}
     */
    get(notificationId: any): Promise<ILocalNotification>;
    /**
     * Get all notification objects
     * @returns {Promise<ILocalNotification[]>}
     */
    getAll(): Promise<ILocalNotification[]>;
    /**
     * Get a scheduled notification object
     * @param notificationId {any} The id of the notification to get
     * @returns {Promise<ILocalNotification>}
     */
    getScheduled(notificationId: any): Promise<ILocalNotification>;
    /**
     * Get a triggered notification object
     * @param notificationId The id of the notification to get
     * @returns {Promise<ILocalNotification>}
     */
    getTriggered(notificationId: any): Promise<ILocalNotification>;
    /**
     * Adds a group of actions
     * @param groupId The id of the action group
     * @param actions The actions of this group
     * @returns {Promise<any>}
     */
    addActions(groupId: any, actions: ILocalNotificationAction[]): Promise<any>;
    /**
     * Removes a group of actions
     * @param groupId The id of the action group
     * @returns {Promise<any>}
     */
    removeActions(groupId: any): Promise<any>;
    /**
     * Checks if a group of actions is defined
     * @param groupId The id of the action group
     * @returns {Promise<boolean>} Whether the group is defined
     */
    hasActions(groupId: any): Promise<boolean>;
    /**
     * Gets the (platform specific) default settings.
     * @returns {Promise<any>} An object with all default settings
     */
    getDefaults(): Promise<any>;
    /**
     * Overwrites the (platform specific) default settings.
     * @returns {Promise<any>}
     */
    setDefaults(defaults: any): Promise<any>;
    /**
     * Get all scheduled notification objects
     * @returns {Promise<Array<ILocalNotification>>}
     */
    getAllScheduled(): Promise<ILocalNotification[]>;
    /**
     * Get all triggered notification objects
     * @returns {Promise<Array<ILocalNotification>>}
     */
    getAllTriggered(): Promise<ILocalNotification[]>;
    /**
     * Sets a callback for a specific event
     * @param eventName {string} The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions
     * @return {Observable}
     */
    on(eventName: string): Observable<any>;
    /**
     * Not an official interface, however its possible to manually fire events.
     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions
     * @param args Optional arguments
     */
    fireEvent(eventName: string, args: any): void;
    /**
     * Fire queued events once the device is ready and all listeners are registered.
     * @returns {Promise<any>}
     */
    fireQueuedEvents(): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LocalNotifications, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<LocalNotifications>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBFTG9jYWxOb3RpZmljYXRpb25UcmlnZ2VyVW5pdCB7XG4gICAgU0VDT05EID0gXCJzZWNvbmRcIixcbiAgICBNSU5VVEUgPSBcIm1pbnV0ZVwiLFxuICAgIEhPVVIgPSBcImhvdXJcIixcbiAgICBEQVkgPSBcImRheVwiLFxuICAgIFdFRUsgPSBcIndlZWtcIixcbiAgICBNT05USCA9IFwibW9udGhcIixcbiAgICBRVUFSVEVSID0gXCJxdWFydGVyXCIsXG4gICAgWUVBUiA9IFwieWVhclwiLFxuICAgIFdFRUtEQVkgPSBcIndlZWtkYXlcIixcbiAgICBXRUVLREFZX09SRElOQUwgPSBcIndlZWtkYXlPcmRpbmFsXCIsXG4gICAgV0VFS19PRl9NT05USCA9IFwid2Vla09mTW9udGhcIlxufVxuZXhwb3J0IGludGVyZmFjZSBJTG9jYWxOb3RpZmljYXRpb25FdmVyeSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1pbnV0ZS5cbiAgICAgKi9cbiAgICBtaW51dGU/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGhvdXIuXG4gICAgICovXG4gICAgaG91cj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGF5LlxuICAgICAqL1xuICAgIGRheT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGF5IG9mIHdlZWsuXG4gICAgICovXG4gICAgd2Vla2RheT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgd2VlayBvZiB5ZWFkYXkgb2YgdGhlIGFyZGluYWwgd2Vlay5cbiAgICAgKi9cbiAgICB3ZWVrPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBkYXkgb2YgdGhlIG9yZGluYWwgd2Vlay5cbiAgICAgKi9cbiAgICB3ZWVrZGF5T3JkaW5hbD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgd2VlayBvZiBtb250aC5cbiAgICAgKi9cbiAgICB3ZWVrT2ZNb250aD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbW9udGguXG4gICAgICovXG4gICAgbW9udGg/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHF1YXJ0ZXIuXG4gICAgICovXG4gICAgcXVhcnRlcj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgeWVhci5cbiAgICAgKi9cbiAgICB5ZWFyPzogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBJTG9jYWxOb3RpZmljYXRpb25UcmlnZ2VyIHtcbiAgICAvKiogKioqKiogRklYICoqKioqICovXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgYW5kIHRpbWUgd2hlbiB0aGUgc3lzdGVtIHNob3VsZCBkZWxpdmVyIHRoZSBsb2NhbCBub3RpZmljYXRpb24uIElmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgbmlsIG9yIGlzIGEgZGF0ZSBpbiB0aGUgcGFzdCwgdGhlIGxvY2FsIG5vdGlmaWNhdGlvbiBpcyBkZWxpdmVyZWQgaW1tZWRpYXRlbHkuXG4gICAgICogRGVmYXVsdDogbm93IH4gbmV3IERhdGUoKVxuICAgICAqL1xuICAgIGF0PzogRGF0ZTtcbiAgICAvKiogKioqKiogVElNRVNQQU4gKioqKiogKi9cbiAgICAvKipcbiAgICAgKiBBbW91bnQgb2YgdW5pdHNcbiAgICAgKi9cbiAgICBpbj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBVbml0XG4gICAgICovXG4gICAgdW5pdD86IEVMb2NhbE5vdGlmaWNhdGlvblRyaWdnZXJVbml0O1xuICAgIC8qKiAqKioqKiBSRVBFQVQvTUFUQ0ggKioqKiogKi9cbiAgICAvKipcbiAgICAgKiBBbW91bnQgb2YgdW5pdHNcbiAgICAgKi9cbiAgICBjb3VudD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pdFxuICAgICAqL1xuICAgIGV2ZXJ5PzogRUxvY2FsTm90aWZpY2F0aW9uVHJpZ2dlclVuaXQgfCBJTG9jYWxOb3RpZmljYXRpb25FdmVyeTtcbiAgICAvKipcbiAgICAgKiBUaGUgZW5kIG9mIHRoZSByZXBlYXRpbmcgbm90aWZpY2F0aW9uXG4gICAgICovXG4gICAgYmVmb3JlPzogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBUaGUgZGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBzeXN0ZW0gc2hvdWxkIGRlbGl2ZXIgdGhlIGxvY2FsIG5vdGlmaWNhdGlvbi4gSWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBuaWwgb3IgaXMgYSBkYXRlIGluIHRoZSBwYXN0LCB0aGUgbG9jYWwgbm90aWZpY2F0aW9uIGlzIGRlbGl2ZXJlZCBpbW1lZGlhdGVseS5cbiAgICAgKiBPbmx5IGZvciBcInJlcGVhdFwiXG4gICAgICogRGVmYXVsdDogbm93IH4gbmV3IERhdGUoKVxuICAgICAqL1xuICAgIGZpcnN0QXQ/OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIE9ubHkgZm9yIFwibWF0Y2hcIlxuICAgICAqL1xuICAgIGFmdGVyPzogRGF0ZTtcbiAgICAvKiogKioqKiogTE9DQVRJT04gKioqKiogKi9cbiAgICAvKipcbiAgICAgKiBJT1MgT05MWVxuICAgICAqIENlbnRlciBvZiB0aGUgbG9jYXRpb25cbiAgICAgKiBMYXRpdHVkZSBhbmQgTG9uZ2l0dWRlIHZhbHVlc1xuICAgICAqL1xuICAgIGNlbnRlcj86IG51bWJlcltdO1xuICAgIC8qKlxuICAgICAqIElPUyBPTkxZXG4gICAgICogUmFkaXVzIGluIG1ldGVyc1xuICAgICAqL1xuICAgIHJhZGl1cz86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJT1MgT05MWVxuICAgICAqIFRyaWdnZXIgb24gZW50cnkgb2YgdGhlIGxvY2F0aW9uXG4gICAgICovXG4gICAgbm90aWZ5T25FbnRyeT86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSU9TIE9OTFlcbiAgICAgKiBUcmlnZ2VyIG9uIGV4aXQgb2YgdGhlIGxvY2F0aW9uXG4gICAgICovXG4gICAgbm90aWZ5T25FeGl0PzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJT1MgT05MWVxuICAgICAqIFRyaWdnZXIgb25seSBvbmNlP1xuICAgICAqL1xuICAgIHNpbmdsZT86IGJvb2xlYW47XG59XG5leHBvcnQgZGVjbGFyZSBlbnVtIElMb2NhbE5vdGlmaWNhdGlvbkFjdGlvblR5cGUge1xuICAgIElOUFVUID0gXCJpbnB1dFwiLFxuICAgIEJVVFRPTiA9IFwiYnV0dG9uXCJcbn1cbi8qKlxuICogTm90aWZpY2F0aW9uIGFjdGlvblxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2thdHplci9jb3Jkb3ZhLXBsdWdpbi1sb2NhbC1ub3RpZmljYXRpb25zI2FjdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTG9jYWxOb3RpZmljYXRpb25BY3Rpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGUgYWN0aW9uIGlzIHVzZWQgYXMgdGhlIGV2ZW50IG5hbWUgaW4gdGhlIGxpc3RlbmVyIGZ1bmN0aW9uXG4gICAgICovXG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIG9mIHRoZSBub3RpZmljYXRpb24gbWVzc2FnZVxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1ha2UgdGhpcyBub3RpZmljYXRpb24gc2hvdyB3aGVuIGFwcCBpbiBmb3JlZ3JvdW5kLlxuICAgICAqL1xuICAgIGZvcmVncm91bmQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBhY3Rpb24gY2F1c2VzIHRoZSBhcHAgdG8gbGF1bmNoIGluIHRoZSBmb3JlZ3JvdW5kXG4gICAgICovXG4gICAgbGF1bmNoPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFsdWUgaXMgJ2RlY2xpbmUnIHRoZSBhY3Rpb24gaXMgZGlzcGxheWVkIHdpdGggc3BlY2lhbCBoaWdobGlnaHRpbmcgdG8gaW5kaWNhdGUgdGhhdCBpdCBwZXJmb3JtcyBhIGRlc3RydWN0aXZlIHRhc2tcbiAgICAgKi9cbiAgICB1aT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgYWN0aW9uIHJlcXVpcmVzIHRoYXQgdGhlIHVzZXLigJlzIGRldmljZSBiZSB1bmxvY2tlZC5cbiAgICAgKiBXaGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gYWN0aW9uIHdpdGggdGhpcyBvcHRpb24sIHRoZSBzeXN0ZW0gcHJvbXB0c1xuICAgICAqIHRoZSB1c2VyIHRvIHVubG9jayB0aGUgZGV2aWNlXG4gICAgICovXG4gICAgbmVlZHNBdXRoPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVzb3VyY2UgcGF0aCBvZiB0aGUgYWN0aW9uIGljb25cbiAgICAgKi9cbiAgICBpY29uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIEFuIGFycmF5IG9mIHByZS1kZWZpbmVkIGNob2ljZXMgZm9yIHVzZXJzIGlucHV0XG4gICAgICovXG4gICAgY2hvaWNlcz86IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSB1c2VyIGNhbiBwcm92aWRlIGFyYml0cmFyeSB0ZXh0IHZhbHVlc1xuICAgICAqL1xuICAgIGVkaXRhYmxlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJT1MgT05MWVxuICAgICAqIFRoZSB0aXRsZSBvZiB0aGUgdGV4dCBpbnB1dCBidXR0b24gdGhhdCBpcyBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuXG4gICAgICovXG4gICAgc3VibWl0VGl0bGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGFjdGlvbi4gSWYgb21pdHRlZCAnYnV0dG9uJyBpcyB1c2VkLlxuICAgICAqL1xuICAgIHR5cGU/OiBJTG9jYWxOb3RpZmljYXRpb25BY3Rpb25UeXBlO1xufVxuZXhwb3J0IGludGVyZmFjZSBJTG9jYWxOb3RpZmljYXRpb25Qcm9ncmVzc0JhciB7XG4gICAgLyoqXG4gICAgICogSXMgdGhlIHByb2dyZXNzIGJhciBlbmFibGVkP1xuICAgICAqL1xuICAgIGVuYWJsZWQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHZhbHVlXG4gICAgICovXG4gICAgdmFsdWU/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQU5EUk9JRCBPTkxZXG4gICAgICogVGhlIG1heGltdW0gdmFsdWUgKGRlZmF1bHQgaXMgMTAwKVxuICAgICAqL1xuICAgIG1heFZhbHVlPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFNob3cgYW4gaW5kZXRlcm1pbmF0ZSBwcm9ncmVzcyBiYXJcbiAgICAgKi9cbiAgICBpbmRldGVybWluYXRlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXSU5ET1dTIE9OTFlcbiAgICAgKiBHZXRzIG9yIHNldHMgYW4gb3B0aW9uYWwgc3RyaW5nIHRvIGJlIGRpc3BsYXllZCBpbnN0ZWFkIG9mIHRoZVxuICAgICAqIGRlZmF1bHQgcGVyY2VudGFnZSBzdHJpbmcuIElmIHRoaXMgaXNuJ3QgcHJvdmlkZWQsIHNvbWV0aGluZ1xuICAgICAqIGxpa2UgXCI3MCVcIiB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBXSU5ET1dTIE9OTFlcbiAgICAgKiBTZXRzIHRoZSBzdGF0dXMgKHJlcXVpcmVkKSwgd2hpY2ggaXMgZGlzcGxheWVkIHVuZGVybmVhdGggdGhlIHByb2dyZXNzIGJhclxuICAgICAqIG9uIHRoZSBsZWZ0LlxuICAgICAqIFRoaXMgc3RyaW5nIHNob3VsZCByZWZsZWN0IHRoZSBzdGF0dXMgb2YgdGhlIG9wZXJhdGlvbixcbiAgICAgKiBsaWtlIFwiRG93bmxvYWRpbmcuLi5cIiBvciBcIkluc3RhbGxpbmcuLi5cIlxuICAgICAqL1xuICAgIHN0YXR1cz86IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUxvY2FsTm90aWZpY2F0aW9uIHtcbiAgICAvKipcbiAgICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIHJlcXVpcmVkIHRvIGNsZWFyLCBjYW5jZWwsIHVwZGF0ZSBvciByZXRyaWV2ZSB0aGUgbG9jYWwgbm90aWZpY2F0aW9uIGluIHRoZSBmdXR1cmVcbiAgICAgKiBEZWZhdWx0OiAwXG4gICAgICovXG4gICAgaWQ/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRmlyc3Qgcm93IG9mIHRoZSBub3RpZmljYXRpb25cbiAgICAgKiBEZWZhdWx0OiBFbXB0eSBzdHJpbmcgKGlPUykgb3IgdGhlIGFwcCBuYW1lIChBbmRyb2lkKVxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNlY29uZCByb3cgb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgICAqIERlZmF1bHQ6IEVtcHR5IHN0cmluZ1xuICAgICAqL1xuICAgIHRleHQ/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIGN1cnJlbnRseSBzZXQgYXMgdGhlIGJhZGdlIG9mIHRoZSBhcHAgaWNvbiBpbiBTcHJpbmdib2FyZCAoaU9TKSBvciBhdCB0aGUgcmlnaHQtaGFuZCBzaWRlIG9mIHRoZSBsb2NhbCBub3RpZmljYXRpb24gKEFuZHJvaWQpXG4gICAgICogRGVmYXVsdDogMCAod2hpY2ggbWVhbnMgZG9uJ3Qgc2hvdyBhIG51bWJlcilcbiAgICAgKi9cbiAgICBiYWRnZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBVcmkgb2YgdGhlIGZpbGUgY29udGFpbmluZyB0aGUgc291bmQgdG8gcGxheSB3aGVuIGFuIGFsZXJ0IGlzIGRpc3BsYXllZFxuICAgICAqIERlZmF1bHQ6IHJlczovL3BsYXRmb3JtX2RlZmF1bHRcbiAgICAgKi9cbiAgICBzb3VuZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBcmJpdHJhcnkgZGF0YSwgb2JqZWN0cyB3aWxsIGJlIGVuY29kZWQgdG8gSlNPTiBzdHJpbmdcbiAgICAgKiBEZWZhdWx0OiBudWxsXG4gICAgICovXG4gICAgZGF0YT86IGFueTtcbiAgICAvKipcbiAgICAgKiBBTkRST0lEIE9OTFlcbiAgICAgKiBVcmkgb2YgdGhlIGljb24gdGhhdCBpcyBzaG93biBpbiB0aGUgdGlja2VyIGFuZCBub3RpZmljYXRpb25cbiAgICAgKiBEZWZhdWx0OiByZXM6Ly9pY29uXG4gICAgICovXG4gICAgaWNvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBTkRST0lEIE9OTFlcbiAgICAgKiBVcmkgb2YgdGhlIHJlc291cmNlIChvbmx5IHJlczovLykgdG8gdXNlIGluIHRoZSBub3RpZmljYXRpb24gbGF5b3V0cy4gRGlmZmVyZW50IGNsYXNzZXMgb2YgZGV2aWNlcyBtYXkgcmV0dXJuIGRpZmZlcmVudCBzaXplc1xuICAgICAqIERlZmF1bHQ6IHJlczovL2ljX3BvcHVwX3JlbWluZGVyXG4gICAgICovXG4gICAgc21hbGxJY29uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFJHQiB2YWx1ZSBmb3IgdGhlIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIHNtYWxsSWNvbi5cbiAgICAgKiBEZWZhdWx0OiBBbmRyb2lkcyBDT0xPUl9ERUZBVUxULCB3aGljaCB3aWxsIHZhcnkgYmFzZWQgb24gQW5kcm9pZCB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGNvbG9yPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFVzZSB0aGUgZGVmYXVsdCBub3RpZmljYXRpb24gdmlicmF0ZS5cbiAgICAgKi9cbiAgICB2aWJyYXRlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBTkRST0lEIE9OTFlcbiAgICAgKiBEZWZpbmUgdGhlIGJsaW5raW5nIG9mIHRoZSBMRUQgb24gdGhlIGRldmljZS5cbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIExFRCB3aWxsIGJsaW5rIGluIHRoZSBkZWZhdWx0IGNvbG9yIHdpdGhcbiAgICAgKiB0aW1pbmdzIGZvciBvbiBhbmQgb2ZmIHNldCB0byAxMDAwIG1zLlxuICAgICAqIElmIHNldCB0byBhIHN0cmluZywgdGhlIExFRCB3aWxsIGJsaW5rIGluIHRoaXMgQVJHQiB2YWx1ZSB3aXRoXG4gICAgICogdGltaW5ncyBmb3Igb24gYW5kIG9mZiBzZXQgdG8gMTAwMCBtcy5cbiAgICAgKiBJZiBzZXQgdG8gYW4gYXJyYXksIHRoZSB2YWx1ZSBvZiB0aGUga2V5IDAgd2lsbCBiZSB1c2VkIGFzIHRoZSBjb2xvcixcbiAgICAgKiB0aGUgdmFsdWUgb2YgdGhlIGtleSAxIHdpbGwgYmUgdXNlZCBhcyB0aGUgJ29uJyB0aW1pbmcsIHRoZSB2YWx1ZSBvZlxuICAgICAqIHRoZSBrZXkgMiB3aWxsIGJlIHVzZWQgYXMgdGhlICdvZmYnIHRpbWluZ1xuICAgICAqL1xuICAgIGxlZD86IHtcbiAgICAgICAgY29sb3I6IHN0cmluZztcbiAgICAgICAgb246IG51bWJlcjtcbiAgICAgICAgb2ZmOiBudW1iZXI7XG4gICAgfSB8IGFueVtdIHwgYm9vbGVhbiB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBOb3RpZmljYXRpb24gcHJpb3JpdHkuXG4gICAgICogSW50ZWdlcnMgYmV0d2VlbiAtMiBhbmQgMiwgd2hlcmVhcyAtMiBpcyBtaW5pbXVtIGFuZCAyIGlzIG1heGltdW0gcHJpb3JpdHlcbiAgICAgKi9cbiAgICBwcmlvcml0eT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJcyBhIHNpbGVudCBub3RpZmljYXRpb25cbiAgICAgKi9cbiAgICBzaWxlbnQ/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBhIGNsaWNrIG9uIHRoZSBub3RpZmljYXRpb24gY2F1c2VzIHRoZSBhcHBcbiAgICAgKiB0byBsYXVuY2ggaW4gdGhlIGZvcmVncm91bmRcbiAgICAgKi9cbiAgICBsYXVuY2g/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFdha2V1cCB0aGUgZGV2aWNlLiAoZGVmYXVsdCBpcyB0cnVlKVxuICAgICAqL1xuICAgIHdha2V1cD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQU5EUk9JRCBPTkxZXG4gICAgICogU3BlY2lmaWVzIGEgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIHRoaXMgbm90aWZpY2F0aW9uIHNob3VsZCBiZSBjYW5jZWxlZCwgaWYgaXQgaXMgbm90IGFscmVhZHkgY2FuY2VsZWQuXG4gICAgICovXG4gICAgdGltZW91dEFmdGVyPzogbnVtYmVyIHwgZmFsc2U7XG4gICAgLyoqXG4gICAgICogQWN0aW9ucyBpZCBvciBhY3Rpb25zXG4gICAgICovXG4gICAgYWN0aW9ucz86IHN0cmluZyB8IElMb2NhbE5vdGlmaWNhdGlvbkFjdGlvbltdO1xuICAgIC8qKlxuICAgICAqIFdoZW4gdG8gdHJpZ2dlciB0aGUgbm90aWZpY2F0aW9uXG4gICAgICovXG4gICAgdHJpZ2dlcj86IElMb2NhbE5vdGlmaWNhdGlvblRyaWdnZXI7XG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGltYWdlIGF0dGFjaG1lbnRzXG4gICAgICovXG4gICAgYXR0YWNobWVudHM/OiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBBTkRST0lEIE9OTFlcbiAgICAgKiBJZiBhbmQgaG93IHRoZSBub3RpZmljYXRpb24gc2hhbGwgc2hvdyB0aGUgd2hlbiBkYXRlLlxuICAgICAqIFBvc3NiaWxlIHZhbHVlczpcbiAgICAgKiAgICAgICAgICAgICAgICAgIGJvb2xlYW46IHRydWUgZXF1YWxzICdjbG9jaycsIGZhbHNlIGRpc2FibGUgYSB3YXRjaC9jb3VudGVyXG4gICAgICogICAgICAgICAgICAgICAgICAnY2xvY2snOiBTaG93IHRoZSB3aGVuIGRhdGUgaW4gdGhlIGNvbnRlbnQgdmlld1xuICAgICAqICAgICAgICAgICAgICAgICAgJ2Nocm9ub21ldGVyJzogU2hvdyBhIHN0b3B3YXRjaFxuICAgICAqXG4gICAgICovXG4gICAgY2xvY2s/OiBib29sZWFuIHwgc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNob3dzIGEgcHJvZ3Jlc3MgYmFyXG4gICAgICogU2V0dGluZyBhIGJvb2xlYW4gaXMgYSBzaG9ydGN1dCBmb3Ige2VuYWJsZWQ6IHRydWUvZmFsc2V9IHJlc3BlY3RpdmVseVxuICAgICAqL1xuICAgIHByb2dyZXNzQmFyPzogSUxvY2FsTm90aWZpY2F0aW9uUHJvZ3Jlc3NCYXIgfCBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIElmIG11bHRpcGxlIG5vdGlmaWNhdGlvbnMgaGF2ZSB0aGUgc2FtZSBncm91cCB5b3VyIGFwcCBjYW4gcHJlc2VudFxuICAgICAqIHRoZW0gYXMgYSBzaW5nbGUgZ3JvdXAuXG4gICAgICovXG4gICAgZ3JvdXA/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQU5EUk9JRCBPTkxZXG4gICAgICogSWYgc2V0IHRvICd0cnVlJyB0aGlzIG5vdGlmaWNhdGlvbiBjb3VsZCB1c2UgJ3N1bW1hcnknIHRvIHN1bW1hcml6ZVxuICAgICAqIHRoZSBjb250ZW50cyBvZiB0aGUgd2hvbGUgZ3JvdXBcbiAgICAgKi9cbiAgICBncm91cFN1bW1hcnk/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFN1bW1hcnkgb2YgdGhlIHdob2xlIG5vdGlmaWNhdGlvbiBncm91cC4gU2hvdWxkIGJlIHVzZWQgaW4gY29uanVudGlvblxuICAgICAqIHdpdGggJ2dyb3VwU3VtbWFyeScgc2V0IHRvIHRydWVcbiAgICAgKi9cbiAgICBzdW1tYXJ5Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFNldHMgdGhlIG51bWJlciBvZiBpdGVtcyB0aGlzIG5vdGlmaWNhdGlvbiByZXByZXNlbnRzLlxuICAgICAqL1xuICAgIG51bWJlcj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBBTkRST0lEIE9OTFlcbiAgICAgKiBTZXQgd2hldGhlciB0aGlzIGlzIGFuIFwib25nb2luZ1wiIG5vdGlmaWNhdGlvbi5cbiAgICAgKiBPbmdvaW5nIG5vdGlmaWNhdGlvbnMgY2Fubm90IGJlIGRpc21pc3NlZCBieSB0aGUgdXNlcixcbiAgICAgKiBzbyB5b3VyIGFwcGxpY2F0aW9uIG9yIHNlcnZpY2UgbXVzdCB0YWtlIGNhcmUgb2YgY2FuY2VsaW5nIHRoZW0uXG4gICAgICovXG4gICAgc3RpY2t5PzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBTkRST0lEIE9OTFlcbiAgICAgKiBNYWtlIHRoaXMgbm90aWZpY2F0aW9uIGF1dG9tYXRpY2FsbHkgZGlzbWlzc2VkIHdoZW4gdGhlIHVzZXIgdG91Y2hlcyBpdC5cbiAgICAgKi9cbiAgICBhdXRvQ2xlYXI/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIElmIHNldCB0byB0cnVlIHRoZSBub3RpZmljYXRpb24gd2lsbCBiZSBzaG93IGluIGl0cyBlbnRpcmV0eSBvbiBhbGwgbG9ja3NjcmVlbnMuXG4gICAgICogSWYgc2V0IHRvIGZhbHNlIGl0IHdpbGwgbm90IGJlIHJldmVhbGVkIG9uIGEgc2VjdXJlIGxvY2tzY3JlZW4uXG4gICAgICovXG4gICAgbG9ja3NjcmVlbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQU5EUk9JRCBPTkxZXG4gICAgICogU2V0IHRoZSBkZWZhdWx0IG5vdGlmaWNhdGlvbiBvcHRpb25zIHRoYXQgd2lsbCBiZSB1c2VkLlxuICAgICAqIFRoZSB2YWx1ZSBzaG91bGQgYmUgb25lIG9yIG1vcmUgb2YgdGhlIGZvbGxvd2luZyBmaWVsZHMgY29tYmluZWQgd2l0aFxuICAgICAqIGJpdHdpc2Utb3I6IERFRkFVTFRfU09VTkQsIERFRkFVTFRfVklCUkFURSwgREVGQVVMVF9MSUdIVFMuXG4gICAgICovXG4gICAgZGVmYXVsdHM/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQU5EUk9JRCBPTkxZXG4gICAgICogU3BlY2lmaWVzIHRoZSBjaGFubmVsIHRoZSBub3RpZmljYXRpb24gc2hvdWxkIGJlIGRlbGl2ZXJlZCBvbi5cbiAgICAgKi9cbiAgICBjaGFubmVsPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFORFJPSUQgT05MWVxuICAgICAqIFNldCB0aGUgdG9rZW4gZm9yIHRoZSBtZWRpYSBzZXNzaW9uXG4gICAgICovXG4gICAgbWVkaWFTZXNzaW9uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1ha2UgdGhpcyBub3RpZmljYXRpb24gc2hvdyB3aGVuIGFwcCBpbiBmb3JlZ3JvdW5kLlxuICAgICAqL1xuICAgIGZvcmVncm91bmQ/OiBib29sZWFuO1xufVxuLyoqXG4gKiBAbmFtZSBMb2NhbCBOb3RpZmljYXRpb25zXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gZGlzcGxheSBsb2NhbCBub3RpZmljYXRpb25zIG9uIHRoZSBkZXZpY2VcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IExvY2FsTm90aWZpY2F0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbG9jYWwtbm90aWZpY2F0aW9ucy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsTm90aWZpY2F0aW9uczogTG9jYWxOb3RpZmljYXRpb25zKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogLy8gU2NoZWR1bGUgYSBzaW5nbGUgbm90aWZpY2F0aW9uXG4gKiB0aGlzLmxvY2FsTm90aWZpY2F0aW9ucy5zY2hlZHVsZSh7XG4gKiAgIGlkOiAxLFxuICogICB0ZXh0OiAnU2luZ2xlIElMb2NhbE5vdGlmaWNhdGlvbicsXG4gKiAgIHNvdW5kOiBpc0FuZHJvaWQ/ICdmaWxlOi8vc291bmQubXAzJzogJ2ZpbGU6Ly9iZWVwLmNhZicsXG4gKiAgIGRhdGE6IHsgc2VjcmV0OiBrZXkgfVxuICogfSk7XG4gKlxuICpcbiAqIC8vIFNjaGVkdWxlIG11bHRpcGxlIG5vdGlmaWNhdGlvbnNcbiAqIHRoaXMubG9jYWxOb3RpZmljYXRpb25zLnNjaGVkdWxlKFt7XG4gKiAgICBpZDogMSxcbiAqICAgIHRleHQ6ICdNdWx0aSBJTG9jYWxOb3RpZmljYXRpb24gMScsXG4gKiAgICBzb3VuZDogaXNBbmRyb2lkID8gJ2ZpbGU6Ly9zb3VuZC5tcDMnOiAnZmlsZTovL2JlZXAuY2FmJyxcbiAqICAgIGRhdGE6IHsgc2VjcmV0OmtleSB9XG4gKiAgIH0se1xuICogICAgaWQ6IDIsXG4gKiAgICB0aXRsZTogJ0xvY2FsIElMb2NhbE5vdGlmaWNhdGlvbiBFeGFtcGxlJyxcbiAqICAgIHRleHQ6ICdNdWx0aSBJTG9jYWxOb3RpZmljYXRpb24gMicsXG4gKiAgICBpY29uOiAnaHR0cDovL2V4YW1wbGUuY29tL2ljb24ucG5nJ1xuICogfV0pO1xuICpcbiAqXG4gKiAvLyBTY2hlZHVsZSBkZWxheWVkIG5vdGlmaWNhdGlvblxuICogdGhpcy5sb2NhbE5vdGlmaWNhdGlvbnMuc2NoZWR1bGUoe1xuICogICAgdGV4dDogJ0RlbGF5ZWQgSUxvY2FsTm90aWZpY2F0aW9uJyxcbiAqICAgIHRyaWdnZXI6IHthdDogbmV3IERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkgKyAzNjAwKX0sXG4gKiAgICBsZWQ6ICdGRjAwMDAnLFxuICogICAgc291bmQ6IG51bGxcbiAqIH0pO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogSUxvY2FsTm90aWZpY2F0aW9uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExvY2FsTm90aWZpY2F0aW9ucyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBJbmZvcm1zIGlmIHRoZSBhcHAgaGFzIHRoZSBwZXJtaXNzaW9uIHRvIHNob3cgbm90aWZpY2F0aW9ucy5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICAgKi9cbiAgICBoYXNQZXJtaXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBwZXJtaXNzaW9uIHRvIHNob3cgbm90aWZpY2F0aW9ucyBpZiBub3QgYWxyZWFkeSBncmFudGVkLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIHJlcXVlc3RQZXJtaXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGEgc2luZ2xlIG9yIG11bHRpcGxlIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7Tm90aWZpY2F0aW9uIHwgSUxvY2FsTm90aWZpY2F0aW9uW119IG9wdGlvbmFsXG4gICAgICovXG4gICAgc2NoZWR1bGUob3B0aW9ucz86IElMb2NhbE5vdGlmaWNhdGlvbiB8IElMb2NhbE5vdGlmaWNhdGlvbltdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgcHJldmlvdXNseSBzY2hlZHVsZWQgbm90aWZpY2F0aW9uLiBNdXN0IGluY2x1ZGUgdGhlIGlkIGluIHRoZSBvcHRpb25zIHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7SUxvY2FsTm90aWZpY2F0aW9ufSBvcHRpb25hbFxuICAgICAqL1xuICAgIHVwZGF0ZShvcHRpb25zPzogSUxvY2FsTm90aWZpY2F0aW9uKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgc2luZ2xlIG9yIG11bHRpcGxlIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBAcGFyYW0gbm90aWZpY2F0aW9uSWQge2FueX0gQSBzaW5nbGUgbm90aWZpY2F0aW9uIGlkLCBvciBhbiBhcnJheSBvZiBub3RpZmljYXRpb24gaWRzLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHdoZW4gdGhlIG5vdGlmaWNhdGlvbiBoYWQgYmVlbiBjbGVhcmVkXG4gICAgICovXG4gICAgY2xlYXIobm90aWZpY2F0aW9uSWQ6IGFueSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGVuIGFsbCBub3RpZmljYXRpb25zIGhhdmUgY2xlYXJlZFxuICAgICAqL1xuICAgIGNsZWFyQWxsKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIHNpbmdsZSBvciBtdWx0aXBsZSBub3RpZmljYXRpb25zXG4gICAgICogQHBhcmFtIG5vdGlmaWNhdGlvbklkIHthbnl9IEEgc2luZ2xlIG5vdGlmaWNhdGlvbiBpZCwgb3IgYW4gYXJyYXkgb2Ygbm90aWZpY2F0aW9uIGlkcy5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGVuIHRoZSBub3RpZmljYXRpb24gaXMgY2FuY2VsZWRcbiAgICAgKi9cbiAgICBjYW5jZWwobm90aWZpY2F0aW9uSWQ6IGFueSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFsbCBub3RpZmljYXRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugd2hlbiBhbGwgbm90aWZpY2F0aW9ucyBhcmUgY2FuY2VsZWRcbiAgICAgKi9cbiAgICBjYW5jZWxBbGwoKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBwcmVzZW5jZSBvZiBhIG5vdGlmaWNhdGlvblxuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25JZCB7bnVtYmVyfVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIGlzUHJlc2VudChub3RpZmljYXRpb25JZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaXMgYSBub3RpZmljYXRpb24gaXMgc2NoZWR1bGVkXG4gICAgICogQHBhcmFtIG5vdGlmaWNhdGlvbklkIHtudW1iZXJ9XG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAgICovXG4gICAgaXNTY2hlZHVsZWQobm90aWZpY2F0aW9uSWQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbm90aWZpY2F0aW9uIGlzIHRyaWdnZXJlZFxuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25JZCB7bnVtYmVyfVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIGlzVHJpZ2dlcmVkKG5vdGlmaWNhdGlvbklkOiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgbm90aWZpY2F0aW9uIGhhcyBhIGdpdmVuIHR5cGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIFRoZSBJRCBvZiB0aGUgbm90aWZpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlICBUaGUgdHlwZSBvZiB0aGUgbm90aWZpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIGhhc1R5cGUoaWQ6IG51bWJlciwgdHlwZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHR5cGUgKHRyaWdnZXJlZCwgc2NoZWR1bGVkKSBmb3IgdGhlIG5vdGlmaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgVGhlIElEIG9mIHRoZSBub3RpZmljYXRpb24uXG4gICAgICovXG4gICAgZ2V0VHlwZShpZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBub3RpZmljYXRpb24gaWRzXG4gICAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk8bnVtYmVyPj59XG4gICAgICovXG4gICAgZ2V0SWRzKCk6IFByb21pc2U8bnVtYmVyW10+O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaWRzIG9mIHNjaGVkdWxlZCBub3RpZmljYXRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyW10+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgICAqL1xuICAgIGdldFNjaGVkdWxlZElkcygpOiBQcm9taXNlPG51bWJlcltdPjtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGlkcyBvZiB0cmlnZ2VyZWQgbm90aWZpY2F0aW9uc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PG51bWJlcj4+fVxuICAgICAqL1xuICAgIGdldFRyaWdnZXJlZElkcygpOiBQcm9taXNlPG51bWJlcltdPjtcbiAgICAvKipcbiAgICAgKiBHZXQgYSBub3RpZmljYXRpb24gb2JqZWN0XG4gICAgICogQHBhcmFtIG5vdGlmaWNhdGlvbklkIHthbnl9IFRoZSBpZCBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGdldFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPElMb2NhbE5vdGlmaWNhdGlvbj59XG4gICAgICovXG4gICAgZ2V0KG5vdGlmaWNhdGlvbklkOiBhbnkpOiBQcm9taXNlPElMb2NhbE5vdGlmaWNhdGlvbj47XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBub3RpZmljYXRpb24gb2JqZWN0c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPElMb2NhbE5vdGlmaWNhdGlvbltdPn1cbiAgICAgKi9cbiAgICBnZXRBbGwoKTogUHJvbWlzZTxJTG9jYWxOb3RpZmljYXRpb25bXT47XG4gICAgLyoqXG4gICAgICogR2V0IGEgc2NoZWR1bGVkIG5vdGlmaWNhdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0gbm90aWZpY2F0aW9uSWQge2FueX0gVGhlIGlkIG9mIHRoZSBub3RpZmljYXRpb24gdG8gZ2V0XG4gICAgICogQHJldHVybnMge1Byb21pc2U8SUxvY2FsTm90aWZpY2F0aW9uPn1cbiAgICAgKi9cbiAgICBnZXRTY2hlZHVsZWQobm90aWZpY2F0aW9uSWQ6IGFueSk6IFByb21pc2U8SUxvY2FsTm90aWZpY2F0aW9uPjtcbiAgICAvKipcbiAgICAgKiBHZXQgYSB0cmlnZ2VyZWQgbm90aWZpY2F0aW9uIG9iamVjdFxuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25JZCBUaGUgaWQgb2YgdGhlIG5vdGlmaWNhdGlvbiB0byBnZXRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxJTG9jYWxOb3RpZmljYXRpb24+fVxuICAgICAqL1xuICAgIGdldFRyaWdnZXJlZChub3RpZmljYXRpb25JZDogYW55KTogUHJvbWlzZTxJTG9jYWxOb3RpZmljYXRpb24+O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBncm91cCBvZiBhY3Rpb25zXG4gICAgICogQHBhcmFtIGdyb3VwSWQgVGhlIGlkIG9mIHRoZSBhY3Rpb24gZ3JvdXBcbiAgICAgKiBAcGFyYW0gYWN0aW9ucyBUaGUgYWN0aW9ucyBvZiB0aGlzIGdyb3VwXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBhZGRBY3Rpb25zKGdyb3VwSWQ6IGFueSwgYWN0aW9uczogSUxvY2FsTm90aWZpY2F0aW9uQWN0aW9uW10pOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGdyb3VwIG9mIGFjdGlvbnNcbiAgICAgKiBAcGFyYW0gZ3JvdXBJZCBUaGUgaWQgb2YgdGhlIGFjdGlvbiBncm91cFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgcmVtb3ZlQWN0aW9ucyhncm91cElkOiBhbnkpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgZ3JvdXAgb2YgYWN0aW9ucyBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGdyb3VwSWQgVGhlIGlkIG9mIHRoZSBhY3Rpb24gZ3JvdXBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gV2hldGhlciB0aGUgZ3JvdXAgaXMgZGVmaW5lZFxuICAgICAqL1xuICAgIGhhc0FjdGlvbnMoZ3JvdXBJZDogYW55KTogUHJvbWlzZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSAocGxhdGZvcm0gc3BlY2lmaWMpIGRlZmF1bHQgc2V0dGluZ3MuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gQW4gb2JqZWN0IHdpdGggYWxsIGRlZmF1bHQgc2V0dGluZ3NcbiAgICAgKi9cbiAgICBnZXREZWZhdWx0cygpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogT3ZlcndyaXRlcyB0aGUgKHBsYXRmb3JtIHNwZWNpZmljKSBkZWZhdWx0IHNldHRpbmdzLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgc2V0RGVmYXVsdHMoZGVmYXVsdHM6IGFueSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHNjaGVkdWxlZCBub3RpZmljYXRpb24gb2JqZWN0c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PElMb2NhbE5vdGlmaWNhdGlvbj4+fVxuICAgICAqL1xuICAgIGdldEFsbFNjaGVkdWxlZCgpOiBQcm9taXNlPElMb2NhbE5vdGlmaWNhdGlvbltdPjtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRyaWdnZXJlZCBub3RpZmljYXRpb24gb2JqZWN0c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PElMb2NhbE5vdGlmaWNhdGlvbj4+fVxuICAgICAqL1xuICAgIGdldEFsbFRyaWdnZXJlZCgpOiBQcm9taXNlPElMb2NhbE5vdGlmaWNhdGlvbltdPjtcbiAgICAvKipcbiAgICAgKiBTZXRzIGEgY2FsbGJhY2sgZm9yIGEgc3BlY2lmaWMgZXZlbnRcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBldmVudC4gQXZhaWxhYmxlIGV2ZW50czogc2NoZWR1bGUsIHRyaWdnZXIsIGNsaWNrLCB1cGRhdGUsIGNsZWFyLCBjbGVhcmFsbCwgY2FuY2VsLCBjYW5jZWxhbGwuIEN1c3RvbSBldmVudCBuYW1lcyBhcmUgcG9zc2libGUgZm9yIGFjdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfVxuICAgICAqL1xuICAgIG9uKGV2ZW50TmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIE5vdCBhbiBvZmZpY2lhbCBpbnRlcmZhY2UsIGhvd2V2ZXIgaXRzIHBvc3NpYmxlIHRvIG1hbnVhbGx5IGZpcmUgZXZlbnRzLlxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50LiBBdmFpbGFibGUgZXZlbnRzOiBzY2hlZHVsZSwgdHJpZ2dlciwgY2xpY2ssIHVwZGF0ZSwgY2xlYXIsIGNsZWFyYWxsLCBjYW5jZWwsIGNhbmNlbGFsbC4gQ3VzdG9tIGV2ZW50IG5hbWVzIGFyZSBwb3NzaWJsZSBmb3IgYWN0aW9uc1xuICAgICAqIEBwYXJhbSBhcmdzIE9wdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqL1xuICAgIGZpcmVFdmVudChldmVudE5hbWU6IHN0cmluZywgYXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGaXJlIHF1ZXVlZCBldmVudHMgb25jZSB0aGUgZGV2aWNlIGlzIHJlYWR5IGFuZCBhbGwgbGlzdGVuZXJzIGFyZSByZWdpc3RlcmVkLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgZmlyZVF1ZXVlZEV2ZW50cygpOiBQcm9taXNlPGFueT47XG59XG4iXX0=