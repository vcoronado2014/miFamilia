import { IonicNativePlugin } from '@ionic-native/core';
/**
 * @name Location Accuracy
 * @description
 * This Cordova/Phonegap plugin for Android and iOS to request enabling/changing of Location Services by triggering a native dialog from within the app, avoiding the need for the user to leave your app to change location settings manually.
 *
 * @usage
 * ```typescript
 * import { LocationAccuracy } from '@ionic-native/location-accuracy/ngx';
 *
 * constructor(private locationAccuracy: LocationAccuracy) { }
 *
 * ...
 *
 * this.locationAccuracy.canRequest().then((canRequest: boolean) => {
 *
 *   if(canRequest) {
 *     // the accuracy option will be ignored by iOS
 *     this.locationAccuracy.request(this.locationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY).then(
 *       () => console.log('Request successful'),
 *       error => console.log('Error requesting location permissions', error)
 *     );
 *   }
 *
 * });
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class LocationAccuracy extends IonicNativePlugin {
    /**
     * Convenience constant
     * @type {number}
     */
    REQUEST_PRIORITY_NO_POWER: number;
    /**
     * Convenience constant
     * @type {number}
     */
    REQUEST_PRIORITY_LOW_POWER: number;
    /**
     * Convenience constant
     * @type {number}
     */
    REQUEST_PRIORITY_BALANCED_POWER_ACCURACY: number;
    /**
     * Convenience constant
     * @type {number}
     */
    REQUEST_PRIORITY_HIGH_ACCURACY: number;
    /**
     * Convenience constant
     * @type {number}
     */
    SUCCESS_SETTINGS_SATISFIED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    SUCCESS_USER_AGREED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    ERROR_ALREADY_REQUESTING: number;
    /**
     * Convenience constant
     * @type {number}
     */
    ERROR_INVALID_ACTION: number;
    /**
     * Convenience constant
     * @type {number}
     */
    ERROR_INVALID_ACCURACY: number;
    /**
     * Convenience constant
     * @type {number}
     */
    ERROR_EXCEPTION: number;
    /**
     * Convenience constant
     * @type {number}
     */
    ERROR_CANNOT_CHANGE_ACCURACY: number;
    /**
     * Convenience constant
     * @type {number}
     */
    ERROR_USER_DISAGREED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    ERROR_GOOGLE_API_CONNECTION_FAILED: number;
    /**
     * Indicates if you can request accurate location
     * @returns {Promise<boolean>} Returns a promise that resovles with a boolean that indicates if you can request accurate location
     */
    canRequest(): Promise<boolean>;
    /**
     * Indicates if a request is currently in progress
     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates if a request is currently in progress
     */
    isRequesting(): Promise<boolean>;
    /**
     * Requests accurate location
     * @param accuracy {number} Accuracy, from 0 to 4. You can use the static properties of this class that start with REQUEST_PRIORITY_
     * @returns {Promise<any>} Returns a promise that resolves on success and rejects if an error occurred
     */
    request(accuracy: number): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LocationAccuracy, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<LocationAccuracy>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG4vKipcbiAqIEBuYW1lIExvY2F0aW9uIEFjY3VyYWN5XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgQ29yZG92YS9QaG9uZWdhcCBwbHVnaW4gZm9yIEFuZHJvaWQgYW5kIGlPUyB0byByZXF1ZXN0IGVuYWJsaW5nL2NoYW5naW5nIG9mIExvY2F0aW9uIFNlcnZpY2VzIGJ5IHRyaWdnZXJpbmcgYSBuYXRpdmUgZGlhbG9nIGZyb20gd2l0aGluIHRoZSBhcHAsIGF2b2lkaW5nIHRoZSBuZWVkIGZvciB0aGUgdXNlciB0byBsZWF2ZSB5b3VyIGFwcCB0byBjaGFuZ2UgbG9jYXRpb24gc2V0dGluZ3MgbWFudWFsbHkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBMb2NhdGlvbkFjY3VyYWN5IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9sb2NhdGlvbi1hY2N1cmFjeS9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb25BY2N1cmFjeTogTG9jYXRpb25BY2N1cmFjeSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5sb2NhdGlvbkFjY3VyYWN5LmNhblJlcXVlc3QoKS50aGVuKChjYW5SZXF1ZXN0OiBib29sZWFuKSA9PiB7XG4gKlxuICogICBpZihjYW5SZXF1ZXN0KSB7XG4gKiAgICAgLy8gdGhlIGFjY3VyYWN5IG9wdGlvbiB3aWxsIGJlIGlnbm9yZWQgYnkgaU9TXG4gKiAgICAgdGhpcy5sb2NhdGlvbkFjY3VyYWN5LnJlcXVlc3QodGhpcy5sb2NhdGlvbkFjY3VyYWN5LlJFUVVFU1RfUFJJT1JJVFlfSElHSF9BQ0NVUkFDWSkudGhlbihcbiAqICAgICAgICgpID0+IGNvbnNvbGUubG9nKCdSZXF1ZXN0IHN1Y2Nlc3NmdWwnKSxcbiAqICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKCdFcnJvciByZXF1ZXN0aW5nIGxvY2F0aW9uIHBlcm1pc3Npb25zJywgZXJyb3IpXG4gKiAgICAgKTtcbiAqICAgfVxuICpcbiAqIH0pO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMb2NhdGlvbkFjY3VyYWN5IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBSRVFVRVNUX1BSSU9SSVRZX05PX1BPV0VSOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIFJFUVVFU1RfUFJJT1JJVFlfTE9XX1BPV0VSOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIFJFUVVFU1RfUFJJT1JJVFlfQkFMQU5DRURfUE9XRVJfQUNDVVJBQ1k6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgUkVRVUVTVF9QUklPUklUWV9ISUdIX0FDQ1VSQUNZOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIFNVQ0NFU1NfU0VUVElOR1NfU0FUSVNGSUVEOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIFNVQ0NFU1NfVVNFUl9BR1JFRUQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgRVJST1JfQUxSRUFEWV9SRVFVRVNUSU5HOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEVSUk9SX0lOVkFMSURfQUNUSU9OOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEVSUk9SX0lOVkFMSURfQUNDVVJBQ1k6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgRVJST1JfRVhDRVBUSU9OOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEVSUk9SX0NBTk5PVF9DSEFOR0VfQUNDVVJBQ1k6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgRVJST1JfVVNFUl9ESVNBR1JFRUQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgRVJST1JfR09PR0xFX0FQSV9DT05ORUNUSU9OX0ZBSUxFRDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB5b3UgY2FuIHJlcXVlc3QgYWNjdXJhdGUgbG9jYXRpb25cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvdmxlcyB3aXRoIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB5b3UgY2FuIHJlcXVlc3QgYWNjdXJhdGUgbG9jYXRpb25cbiAgICAgKi9cbiAgICBjYW5SZXF1ZXN0KCk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIGEgcmVxdWVzdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3NcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiBhIHJlcXVlc3QgaXMgY3VycmVudGx5IGluIHByb2dyZXNzXG4gICAgICovXG4gICAgaXNSZXF1ZXN0aW5nKCk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgYWNjdXJhdGUgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0gYWNjdXJhY3kge251bWJlcn0gQWNjdXJhY3ksIGZyb20gMCB0byA0LiBZb3UgY2FuIHVzZSB0aGUgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhpcyBjbGFzcyB0aGF0IHN0YXJ0IHdpdGggUkVRVUVTVF9QUklPUklUWV9cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uIHN1Y2Nlc3MgYW5kIHJlamVjdHMgaWYgYW4gZXJyb3Igb2NjdXJyZWRcbiAgICAgKi9cbiAgICByZXF1ZXN0KGFjY3VyYWN5OiBudW1iZXIpOiBQcm9taXNlPGFueT47XG59XG4iXX0=