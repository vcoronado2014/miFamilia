import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare enum Connection {
    UNKNOWN = 0,
    ETHERNET = 1,
    WIFI = 2,
    CELL_2G = 3,
    CELL_3G = 4,
    CELL_4G = 5,
    CELL = 6,
    NONE = 7
}
/**
 * @name Network
 * @description
 * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).
 *
 * @usage
 * ```typescript
 * import { Network } from '@ionic-native/network/ngx';
 *
 * constructor(private network: Network) { }
 *
 * ...
 *
 * // watch network for a disconnection
 * let disconnectSubscription = this.network.onDisconnect().subscribe(() => {
 *   console.log('network was disconnected :-(');
 * });
 *
 * // stop disconnect watch
 * disconnectSubscription.unsubscribe();
 *
 *
 * // watch network for a connection
 * let connectSubscription = this.network.onConnect().subscribe(() => {
 *   console.log('network connected!');
 *   // We just got a connection but we need to wait briefly
 *    // before we determine the connection type. Might need to wait.
 *   // prior to doing any api requests as well.
 *   setTimeout(() => {
 *     if (this.network.type === 'wifi') {
 *       console.log('we got a wifi connection, woohoo!');
 *     }
 *   }, 3000);
 * });
 *
 * // stop connect watch
 * connectSubscription.unsubscribe();
 *
 * ```
 * @advanced
 * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`
 */
export declare class Network extends IonicNativePlugin {
    /**
     * Constants for possible connection types
     */
    Connection: {
        UNKNOWN: string;
        ETHERNET: string;
        WIFI: string;
        CELL_2G: string;
        CELL_3G: string;
        CELL_4G: string;
        CELL: string;
        NONE: string;
    };
    /**
     * Connection type
     * @return {string}
     */
    type: string;
    /**
     * Downlink Max Speed
     * @return {string}
     */
    downlinkMax: string;
    /**
     * Returns an observable to watch connection changes
     * @return {Observable<any>}
     */
    onChange(): Observable<any>;
    /**
     * Get notified when the device goes offline
     * @returns {Observable<any>} Returns an observable.
     */
    onDisconnect(): Observable<any>;
    /**
     * Get notified when the device goes online
     * @returns {Observable<any>} Returns an observable.
     */
    onConnect(): Observable<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Network, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Network>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGVudW0gQ29ubmVjdGlvbiB7XG4gICAgVU5LTk9XTiA9IDAsXG4gICAgRVRIRVJORVQgPSAxLFxuICAgIFdJRkkgPSAyLFxuICAgIENFTExfMkcgPSAzLFxuICAgIENFTExfM0cgPSA0LFxuICAgIENFTExfNEcgPSA1LFxuICAgIENFTEwgPSA2LFxuICAgIE5PTkUgPSA3XG59XG4vKipcbiAqIEBuYW1lIE5ldHdvcmtcbiAqIEBkZXNjcmlwdGlvblxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGNvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24uIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtOZXR3b3JrIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24pLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbmV0d29yay9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmV0d29yazogTmV0d29yaykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gd2F0Y2ggbmV0d29yayBmb3IgYSBkaXNjb25uZWN0aW9uXG4gKiBsZXQgZGlzY29ubmVjdFN1YnNjcmlwdGlvbiA9IHRoaXMubmV0d29yay5vbkRpc2Nvbm5lY3QoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICogICBjb25zb2xlLmxvZygnbmV0d29yayB3YXMgZGlzY29ubmVjdGVkIDotKCcpO1xuICogfSk7XG4gKlxuICogLy8gc3RvcCBkaXNjb25uZWN0IHdhdGNoXG4gKiBkaXNjb25uZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICpcbiAqIC8vIHdhdGNoIG5ldHdvcmsgZm9yIGEgY29ubmVjdGlvblxuICogbGV0IGNvbm5lY3RTdWJzY3JpcHRpb24gPSB0aGlzLm5ldHdvcmsub25Db25uZWN0KCkuc3Vic2NyaWJlKCgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ25ldHdvcmsgY29ubmVjdGVkIScpO1xuICogICAvLyBXZSBqdXN0IGdvdCBhIGNvbm5lY3Rpb24gYnV0IHdlIG5lZWQgdG8gd2FpdCBicmllZmx5XG4gKiAgICAvLyBiZWZvcmUgd2UgZGV0ZXJtaW5lIHRoZSBjb25uZWN0aW9uIHR5cGUuIE1pZ2h0IG5lZWQgdG8gd2FpdC5cbiAqICAgLy8gcHJpb3IgdG8gZG9pbmcgYW55IGFwaSByZXF1ZXN0cyBhcyB3ZWxsLlxuICogICBzZXRUaW1lb3V0KCgpID0+IHtcbiAqICAgICBpZiAodGhpcy5uZXR3b3JrLnR5cGUgPT09ICd3aWZpJykge1xuICogICAgICAgY29uc29sZS5sb2coJ3dlIGdvdCBhIHdpZmkgY29ubmVjdGlvbiwgd29vaG9vIScpO1xuICogICAgIH1cbiAqICAgfSwgMzAwMCk7XG4gKiB9KTtcbiAqXG4gKiAvLyBzdG9wIGNvbm5lY3Qgd2F0Y2hcbiAqIGNvbm5lY3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAqXG4gKiBgYGBcbiAqIEBhZHZhbmNlZFxuICogVGhlIGB0eXBlYCBwcm9wZXJ0eSB3aWxsIHJldHVybiBvbmUgb2YgdGhlIGZvbGxvd2luZyBjb25uZWN0aW9uIHR5cGVzOiBgdW5rbm93bmAsIGBldGhlcm5ldGAsIGB3aWZpYCwgYDJnYCwgYDNnYCwgYDRnYCwgYGNlbGx1bGFyYCwgYG5vbmVgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5ldHdvcmsgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogQ29uc3RhbnRzIGZvciBwb3NzaWJsZSBjb25uZWN0aW9uIHR5cGVzXG4gICAgICovXG4gICAgQ29ubmVjdGlvbjoge1xuICAgICAgICBVTktOT1dOOiBzdHJpbmc7XG4gICAgICAgIEVUSEVSTkVUOiBzdHJpbmc7XG4gICAgICAgIFdJRkk6IHN0cmluZztcbiAgICAgICAgQ0VMTF8yRzogc3RyaW5nO1xuICAgICAgICBDRUxMXzNHOiBzdHJpbmc7XG4gICAgICAgIENFTExfNEc6IHN0cmluZztcbiAgICAgICAgQ0VMTDogc3RyaW5nO1xuICAgICAgICBOT05FOiBzdHJpbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb25uZWN0aW9uIHR5cGVcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERvd25saW5rIE1heCBTcGVlZFxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBkb3dubGlua01heDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byB3YXRjaCBjb25uZWN0aW9uIGNoYW5nZXNcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59XG4gICAgICovXG4gICAgb25DaGFuZ2UoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEdldCBub3RpZmllZCB3aGVuIHRoZSBkZXZpY2UgZ29lcyBvZmZsaW5lXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlLlxuICAgICAqL1xuICAgIG9uRGlzY29ubmVjdCgpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogR2V0IG5vdGlmaWVkIHdoZW4gdGhlIGRldmljZSBnb2VzIG9ubGluZVxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICAgKi9cbiAgICBvbkNvbm5lY3QoKTogT2JzZXJ2YWJsZTxhbnk+O1xufVxuIl19