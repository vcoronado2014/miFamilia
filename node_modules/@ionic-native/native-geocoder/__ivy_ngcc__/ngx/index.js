import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var NativeGeocoder = /** @class */ (function (_super) {
    __extends(NativeGeocoder, _super);
    function NativeGeocoder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeGeocoder.prototype.reverseGeocode = function (latitude, longitude, options) { return cordova(this, "reverseGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoder.prototype.forwardGeocode = function (addressString, options) { return cordova(this, "forwardGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoder.pluginName = "NativeGeocoder";
    NativeGeocoder.plugin = "cordova-plugin-nativegeocoder";
    NativeGeocoder.pluginRef = "nativegeocoder";
    NativeGeocoder.repo = "https://github.com/sebastianbaar/cordova-plugin-nativegeocoder";
    NativeGeocoder.platforms = ["iOS", "Android"];
NativeGeocoder.ɵfac = function NativeGeocoder_Factory(t) { return ɵNativeGeocoder_BaseFactory(t || NativeGeocoder); };
NativeGeocoder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NativeGeocoder, factory: function (t) { return NativeGeocoder.ɵfac(t); } });
var ɵNativeGeocoder_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NativeGeocoder);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeGeocoder, [{
        type: Injectable
    }], null, null); })();
    return NativeGeocoder;
}(IonicNativePlugin));
export { NativeGeocoder };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvbmF0aXZlLWdlb2NvZGVyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtBQUlVLElBbUMwQixrQ0FBaUI7QUFBQztBQUcvQjtBQUNKO0FBQU0sSUFRdkIsdUNBQWMsYUFBQyxRQUFnQixFQUFFLFNBQWlCLEVBQUUsT0FBK0I7QUFHakQsSUFRbEMsdUNBQWMsYUFBQyxhQUFxQixFQUFFLE9BQStCO0FBSW5DO0FBRXpCO0FBQTZEO0FBQ3hCO0FBSWxDO0lBbENELGNBQWMsd0JBRDFCLFVBQVUsRUFBRSxRQUNBLGNBQWM7Ozs7OzBCQUFFO0FBQUMseUJBekM5QjtBQUFFLEVBeUNrQyxpQkFBaUI7QUFFckQsU0FGYSxjQUFjO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBOYXRpdmUgR2VvY29kZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gZm9yIG5hdGl2ZSBmb3J3YXJkIGFuZCByZXZlcnNlIGdlb2NvZGluZ1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmF0aXZlR2VvY29kZXIsIE5hdGl2ZUdlb2NvZGVyUmVzdWx0LCBOYXRpdmVHZW9jb2Rlck9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL25hdGl2ZS1nZW9jb2Rlci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlR2VvY29kZXI6IE5hdGl2ZUdlb2NvZGVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBsZXQgb3B0aW9uczogTmF0aXZlR2VvY29kZXJPcHRpb25zID0ge1xuICogICAgIHVzZUxvY2FsZTogdHJ1ZSxcbiAqICAgICBtYXhSZXN1bHRzOiA1XG4gKiB9O1xuICpcbiAqIHRoaXMubmF0aXZlR2VvY29kZXIucmV2ZXJzZUdlb2NvZGUoNTIuNTA3MjA5NSwgMTMuMTQ1MjgxOCwgb3B0aW9ucylcbiAqICAgLnRoZW4oKHJlc3VsdDogTmF0aXZlR2VvY29kZXJSZXN1bHRbXSkgPT4gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdKSkpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcbiAqXG4gKiB0aGlzLm5hdGl2ZUdlb2NvZGVyLmZvcndhcmRHZW9jb2RlKCdCZXJsaW4nLCBvcHRpb25zKVxuICogICAudGhlbigocmVzdWx0OiBOYXRpdmVHZW9jb2RlclJlc3VsdFtdKSA9PiBjb25zb2xlLmxvZygnVGhlIGNvb3JkaW5hdGVzIGFyZSBsYXRpdHVkZT0nICsgcmVzdWx0WzBdLmxhdGl0dWRlICsgJyBhbmQgbG9uZ2l0dWRlPScgKyByZXN1bHRbMF0ubG9uZ2l0dWRlKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogTmF0aXZlR2VvY29kZXJSZXN1bHRcbiAqIE5hdGl2ZUdlb2NvZGVyT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ05hdGl2ZUdlb2NvZGVyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbmF0aXZlZ2VvY29kZXInLFxuICBwbHVnaW5SZWY6ICduYXRpdmVnZW9jb2RlcicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vc2ViYXN0aWFuYmFhci9jb3Jkb3ZhLXBsdWdpbi1uYXRpdmVnZW9jb2RlcicsXG4gIHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5hdGl2ZUdlb2NvZGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBSZXZlcnNlIGdlb2NvZGUgYSBnaXZlbiBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIHRvIGZpbmQgbG9jYXRpb24gYWRkcmVzc1xuICAgKiBAcGFyYW0gbGF0aXR1ZGUge251bWJlcn0gVGhlIGxhdGl0dWRlXG4gICAqIEBwYXJhbSBsb25naXR1ZGUge251bWJlcn0gVGhlIGxvbmdpdHVkZVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlR2VvY29kZXJPcHRpb25zfSBUaGUgb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPE5hdGl2ZUdlb2NvZGVyUmVzdWx0W10+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJ1xuICB9KVxuICByZXZlcnNlR2VvY29kZShsYXRpdHVkZTogbnVtYmVyLCBsb25naXR1ZGU6IG51bWJlciwgb3B0aW9ucz86IE5hdGl2ZUdlb2NvZGVyT3B0aW9ucyk6IFByb21pc2U8TmF0aXZlR2VvY29kZXJSZXN1bHRbXT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogRm9yd2FyZCBnZW9jb2RlIGEgZ2l2ZW4gYWRkcmVzcyB0byBmaW5kIGNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSBhZGRyZXNzU3RyaW5nIHtzdHJpbmd9IFRoZSBhZGRyZXNzIHRvIGJlIGdlb2NvZGVkXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVHZW9jb2Rlck9wdGlvbnN9IFRoZSBvcHRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TmF0aXZlR2VvY29kZXJSZXN1bHRbXT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnXG4gIH0pXG4gIGZvcndhcmRHZW9jb2RlKGFkZHJlc3NTdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IE5hdGl2ZUdlb2NvZGVyT3B0aW9ucyk6IFByb21pc2U8TmF0aXZlR2VvY29kZXJSZXN1bHRbXT4geyByZXR1cm47IH1cbn1cblxuLyoqXG4gKiBFbmNhcHN1bGF0ZXMgZm9ybWF0IGluZm9ybWF0aW9uIGFib3V0IGEgZ2VvY29kaW5nIHJlc3VsdC5cbiAqIG1vcmUgSW5mbzpcbiAqICAtIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2NvcmVsb2NhdGlvbi9jbHBsYWNlbWFya1xuICogIC0gaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvbG9jYXRpb24vQWRkcmVzcy5odG1sXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlR2VvY29kZXJSZXN1bHQge1xuICAvKipcbiAgICogVGhlIGxhdGl0dWRlLlxuICAgKi9cbiAgbGF0aXR1ZGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBsb25naXR1ZGUuXG4gICAqL1xuICBsb25naXR1ZGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjb3VudHJ5IGNvZGUuXG4gICAqL1xuICBjb3VudHJ5Q29kZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNvdW50cnkgbmFtZS5cbiAgICovXG4gIGNvdW50cnlOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcG9zdGFsIGNvZGUuXG4gICAqL1xuICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgYWRtaW5pc3RyYXRpdmVBcmVhLlxuICAgKi9cbiAgYWRtaW5pc3RyYXRpdmVBcmVhOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgc3ViQWRtaW5pc3RyYXRpdmVBcmVhLlxuICAgKi9cbiAgc3ViQWRtaW5pc3RyYXRpdmVBcmVhOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbG9jYWxpdHkuXG4gICAqL1xuICBsb2NhbGl0eTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHN1YkxvY2FsaXR5LlxuICAgKi9cbiAgc3ViTG9jYWxpdHk6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB0aG9yb3VnaGZhcmUuXG4gICAqL1xuICB0aG9yb3VnaGZhcmU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBzdWJUaG9yb3VnaGZhcmUuXG4gICAqL1xuICBzdWJUaG9yb3VnaGZhcmU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBhcmVhc09mSW50ZXJlc3RcbiAgICovXG4gIGFyZWFzT2ZJbnRlcmVzdDogc3RyaW5nW107XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgcmV2ZXJzZSBhbmQgZm9yd2FyZCBnZW9jb2RpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlR2VvY29kZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBsb2NhbGUgdG8gdXNlIHdoZW4gcmV0dXJuaW5nIHRoZSBhZGRyZXNzIGluZm9ybWF0aW9uLlxuICAgKiBJZiBzZXQgdG8gJ2ZhbHNlJyB0aGUgbG9jYWxlIHdpbGwgYWx3YXlzIGJlICdlbl9VUycuXG4gICAqIERlZmF1bHQgaXMgJ3RydWUnXG4gICAqL1xuICB1c2VMb2NhbGU6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBsb2NhbGUgdG8gdXNlIHdoZW4gcmV0dXJuaW5nIHRoZSBhZGRyZXNzIGluZm9ybWF0aW9uLlxuICAgKiBlLmcuOiAnZmEtSVInIG9yICdkZV9ERScuXG4gICAqL1xuICBkZWZhdWx0TG9jYWxlPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdCB0byByZXR1cm4gKG1heCBpcyA1KS5cbiAgICogRGVmYXVsdCBpcyAxXG4gICAqL1xuICBtYXhSZXN1bHRzOiBudW1iZXI7XG59XG4iXX0=